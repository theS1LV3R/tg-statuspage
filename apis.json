{
  "station/id": [
    {
      "Id": 1,
      "Jumphost": "s1.techo.gathering.org",
      "Net": "10.101.0.0/16",
      "Password": "Pooxahz7Moo8",
      "User": "",
      "Notes": "edge0 is plugged into ge-0/0/1 and ge-1/0/1, with ege1 in ge-0/0/0 and ge-1/0/0, which is the oposit of the documentation. It is important that edge0 ends up with the 10.101.100.0/24 client net, otherwise you are free to solve the issue however you like."
    },
    {
      "Id": 2,
      "Jumphost": "s2.techo.gathering.org",
      "Net": "10.102.0.0/16",
      "Password": "IJ8SeiLauy",
      "User": "8953b7bc-4b90-4243-9555-6442a2334641",
      "Notes": "edge0 is plugged into ge-0/0/1 and ge-1/0/1, with ege1 in ge-0/0/0 and ge-1/0/0, which is the oposit of the documentation. It is important that edge0 ends up with the 10.102.100.0/24 client net, otherwise you are free to solve the issue however you like."
    },
    {
      "Id": 3,
      "Jumphost": "s3.techo.gathering.org",
      "Net": "10.103.0.0/16",
      "Password": "Ait4enez8she",
      "User": "",
      "Notes": "Only one uplink from distro to core is functional. And edge0 is plugged into ge-0/0/1 and ge-1/0/1, with ege1 in ge-0/0/0 and ge-1/0/0, which is the oposit of the documentation. It is important that edge0 ends up with the 10.103.100.0/24 client net, otherwise you are free to solve the issue however you like."
    },
    {
      "Id": 4,
      "Jumphost": "s4.techo.gathering.org",
      "Net": "10.104.0.0/16",
      "Password": "Limieyee1xoh",
      "User": "",
      "Notes": "/dev/ttyUSB2 is wonky, but /dev/ttyUSB3 is the same distro, and works fine, it seems."
    }
  ],
  "tasks": [
    {
      "Sequence": 1,
      "ShortName": "task1",
      "Name": "Task 1: Get your distro talking to the core",
      "Description": "0. Skim through this entire document! There is a ton of useful information!\n1. Find the distro switch with screen\n2. The distribution switch has two cables connected to the core (see the\n   `Reference documentation`_ chapter) and you need to configure them as an\n   aggregated interface.\n3. Set up LACP on distro0, ae0, towards core (see `Tips and tricks`_). That\n   means setting up an ``interfaces`` section for both physical devices -\n   or a interfaces-range that cover both.\n4. Set up \"unit 0\" on ae0 on the distro. It needs to have the link-net IP\n   provided in the `Reference documentation`_ chapter.\n5. Check that your uplink ports (`ge-0/0/46` and `ge-0/0/46`) are listed as\n   \"up\" when you use ``show interfaces``.\n6. If they are, check that ``ae0.0`` is up with ``show interfaces ae0.0\n   extensive``.\n7. If you've done everything right up until now, verify.sh should tell you\n   that 10.x.200.2 replies to ping from core, but not globally.\n8. Let your distro switch know that `10.x.200.1` is your default route. See\n   `Reference documentation`_ on static routing to accomplish this.\n9. At this point, you should be able to run ``ping 8.8.8.8`` from the\n   distro0 switch and get a reply, and the verification script should state\n   that `10.x.200.2` replies both from core and globally.\n\nAt this point you have a working distro0 switch! Be happy! Take a break.\n\nInteresting things to try: Try ``ssh 10.x.200.2`` from the jumphost\ndirectly. It should let you ssh directly to the switch.\n",
      "Tests": []
    },
    {
      "Sequence": 2,
      "ShortName": "task2",
      "Name": "Task 2: Link up distro and edge0",
      "Description": "Now that distro0 is up, we want to get a link to edge0. We start on\ndistro0.\n\n1. Edge0 is connected through ports ``ge-0/0/0`` and ``ge-1/0/0`` on\n   distro0. Just as with your core link, you need to configure LACP to bond\n   these to interfaces together.\n2. Create an ``interface`` section for ``ge-0/0/0`` and ``ge-1/0/0`` that\n   enables 802.3ad. Call the ae-interface ``ae100`` for convenience.\n3. Set up \"unit 0\" on ae100. You will find the appropriate link-net IP in\n   the reference documentation.\n4. Once this is up, using ``show interfaces ae100 extensive`` should show\n   the link as DOWN, but it should also show the IP and the physical ports\n   should be listed as up. It's time to connect to edge0.\n5. Open a screen session to ``edge0`` - log in.\n6. On edge0, it's the same deal, but different interfaces: ``ge-0/0/0`` and\n   ``ge-0/0/1`` is connected to the distro.\n7. Do the same as step 2 and 3: Set up an ``interface`` section for the\n   physical interfaces (``ge-0/0/0`` and ``ge-0/0/1``). For this end, use\n   ``ae0``.\n8. Set up an ``interface`` section for ``ae0`` and ``ae0`` unit 0, with the\n   other end of the link-net IP.\n9. Check ``show interfaces ae0``. It _should_ display as UP, and with the\n   correct IP and bandwidth 2Gbps.\n10. Verify: run ``ping 10.x.200.5`` on edge0 and ``ping 10.x.200.6`` on\n    distro0: it should reply.\n11. The verify-script will still only get a global reply from 10.x.200.5 -\n    the distro side of the link.\n12. Back on edge0, set up a static route using 10.x.200.5 as default\n    gateway.\n13. Verify should now get a global reply from both 10.x.200.5 and\n    10.x.200.6\n\nIf you've gotten this far, you've gotten basic connectivity done! Good\nwork! Take a break, brag a bit.\n\nThings to test: Try disabling an up-link with ``set interfaces ge-0/0/0\ndisable`` (in configure), then check the speed of ae0 with ``show\ninterfaces ae0``. Re-enable the uplink-port with ``delete interfaces\nge-0/0/0 disable``.\n",
      "Tests": []
    },
    {
      "Sequence": 3,
      "ShortName": "task3",
      "Name": "Task 3: Rinse and repeat for edge1",
      "Description": "There are two edge-switches, so now you get to do the previous task all\nover again.  Instead of repeating the instructions, here's a tip:\n\n``show configuration interfaces | display set`` can be used to extract\nset-statements, edit (in vim/notepad/whatever), and paste it back in. Just\nremember to modify the IP addresses!\n\nBy the end of this task, all three switches should be fully connected,\neverything should verify correctly, except that the client FOO is still not\non-line.\n",
      "Tests": []
    },
    {
      "Sequence": 4,
      "ShortName": "task4",
      "Name": "Task 4: Crowd pleaser: Get the client online",
      "Description": "1. Connect to edge0, what you want to do is set all client ports to belong\n   to \"family ethernet-switching\". This is probably best done with ``set\n   interfaces interface-range clients member-range ge-0/0/2 to ge-0/0/47``,\n   and then applying any other interface-statements to the ``clients``\n   interface range. See `Reference documentation`_ for examples.\n2. Once this is done, basic switching works, but there's no way for you to\n   know and there's no way to test. You have created a LAN with no\n   connection to the outside world.\n3. Each such port is connected to a vlan, by default, this is the `default`\n   vlan - you can look at it with ``show vlans default``.\n4. Assign a \"layer 3\" interface to the default vlan, it should be named\n   `vlan.0`.\n5. Assign an IP address to the `vlan.0` interface.\n6. Check if vlan.0 is up with ``show interface vlan.0``.\n7. Ping 10.x.100.2 locally from edge0 - it should now reply (locally).\n8. To get it working globally, you need to log in to distro0 and create a\n   static route for 10.x.100.0/24 via 10.x.200.6 (the edge0 linknet IP).\n9. Check that it works.\n10. Do the same for edge1 :D\n\nIf you made it this far, the verify script should be very happy just about\nnow, and you should be happy as well!\n",
      "Tests": []
    },
    {
      "Sequence": 5,
      "ShortName": "management",
      "Name": "Management access",
      "Description": "This isn't so much a task itself, but some of the other tasks have tests\nthat require management access to your switches. This is an overview of\nwhether that is working or not - it will gradually start working as you\nbring your network up.\n",
      "Tests": []
    }
  ]
}
